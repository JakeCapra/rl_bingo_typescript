[{"C:\\Users\\hocke\\Desktop\\reactProjects\\rl_bingo_typescript\\src\\index.tsx":"1","C:\\Users\\hocke\\Desktop\\reactProjects\\rl_bingo_typescript\\src\\reportWebVitals.ts":"2","C:\\Users\\hocke\\Desktop\\reactProjects\\rl_bingo_typescript\\src\\App.tsx":"3","C:\\Users\\hocke\\Desktop\\reactProjects\\rl_bingo_typescript\\src\\components\\table.tsx":"4","C:\\Users\\hocke\\Desktop\\reactProjects\\rl_bingo_typescript\\src\\components\\loadTiles.tsx":"5","C:\\Users\\hocke\\Desktop\\reactProjects\\rl_bingo_typescript\\src\\components\\BingoItemRepository.js":"6","C:\\Users\\hocke\\Desktop\\reactProjects\\rl_bingo_typescript\\src\\components\\gameBoard.tsx":"7","C:\\Users\\hocke\\Desktop\\reactProjects\\rl_bingo_typescript\\src\\components\\checkWin.tsx":"8","C:\\Users\\hocke\\Desktop\\reactProjects\\rl_bingo_typescript\\src\\components\\reset.tsx":"9","C:\\Users\\hocke\\Desktop\\reactProjects\\rl_bingo_typescript\\src\\components\\newItemInput.tsx":"10"},{"size":500,"mtime":499162500000,"results":"11","hashOfConfig":"12"},{"size":425,"mtime":499162500000,"results":"13","hashOfConfig":"12"},{"size":1741,"mtime":1608410708185,"results":"14","hashOfConfig":"12"},{"size":1117,"mtime":1608410069431,"results":"15","hashOfConfig":"12"},{"size":3375,"mtime":1608398489143,"results":"16","hashOfConfig":"12"},{"size":2032,"mtime":1595283488864,"results":"17","hashOfConfig":"12"},{"size":1197,"mtime":1608410580152,"results":"18","hashOfConfig":"12"},{"size":1794,"mtime":1608402634121,"results":"19","hashOfConfig":"12"},{"size":543,"mtime":1608403347792,"results":"20","hashOfConfig":"12"},{"size":1615,"mtime":1608409724240,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"26iccb",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"24"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"24"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"24"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"C:\\Users\\hocke\\Desktop\\reactProjects\\rl_bingo_typescript\\src\\index.tsx",[],["48","49"],"C:\\Users\\hocke\\Desktop\\reactProjects\\rl_bingo_typescript\\src\\reportWebVitals.ts",[],"C:\\Users\\hocke\\Desktop\\reactProjects\\rl_bingo_typescript\\src\\App.tsx",["50","51","52"],"C:\\Users\\hocke\\Desktop\\reactProjects\\rl_bingo_typescript\\src\\components\\table.tsx",["53","54"],"C:\\Users\\hocke\\Desktop\\reactProjects\\rl_bingo_typescript\\src\\components\\loadTiles.tsx",["55","56","57","58","59","60"],"import { defaultCipherList } from 'constants';\r\nimport React from 'react';\r\nimport { GetBingoTileItems } from './BingoItemRepository';\r\nimport IAddedItem from './structuers/addedItem'\r\nimport IItem from './structuers/tileItem';\r\n\r\nfunction loadTiles(addedTiles: IAddedItem[] | undefined) {\r\n   \r\n    // defining the array like this is the only way it works, idk why, just dont look at it\r\n    let items: IItem[][] = [\r\n        [{rowIndex: 0, colIndex: 0, value: \"\", marked: false}, {rowIndex: 0, colIndex: 0, value: \"\", marked: false}, {rowIndex: 0, colIndex: 0, value: \"\", marked: false}, {rowIndex: 0, colIndex: 0, value: \"\", marked: false}, {rowIndex: 0, colIndex: 0, value: \"\", marked: false}],\r\n        [{rowIndex: 0, colIndex: 0, value: \"\", marked: false}, {rowIndex: 0, colIndex: 0, value: \"\", marked: false}, {rowIndex: 0, colIndex: 0, value: \"\", marked: false}, {rowIndex: 0, colIndex: 0, value: \"\", marked: false}, {rowIndex: 0, colIndex: 0, value: \"\", marked: false}],\r\n        [{rowIndex: 0, colIndex: 0, value: \"\", marked: false}, {rowIndex: 0, colIndex: 0, value: \"\", marked: false}, {rowIndex: 0, colIndex: 0, value: \"\", marked: false}, {rowIndex: 0, colIndex: 0, value: \"\", marked: false}, {rowIndex: 0, colIndex: 0, value: \"\", marked: false}],\r\n        [{rowIndex: 0, colIndex: 0, value: \"\", marked: false}, {rowIndex: 0, colIndex: 0, value: \"\", marked: false}, {rowIndex: 0, colIndex: 0, value: \"\", marked: false}, {rowIndex: 0, colIndex: 0, value: \"\", marked: false}, {rowIndex: 0, colIndex: 0, value: \"\", marked: false}],\r\n        [{rowIndex: 0, colIndex: 0, value: \"\", marked: false}, {rowIndex: 0, colIndex: 0, value: \"\", marked: false}, {rowIndex: 0, colIndex: 0, value: \"\", marked: false}, {rowIndex: 0, colIndex: 0, value: \"\", marked: false}, {rowIndex: 0, colIndex: 0, value: \"\", marked: false}],\r\n    ]\r\n    \r\n    // array of strings\r\n    var availableTiles = GetBingoTileItems(0);\r\n    var usedIndex: number[] = [];\r\n    var usedIndexLoad: number[] = [];\r\n    let tileArr = []; // tiles to added to board\r\n    \r\n    \r\n    // for user added tiles\r\n    if (addedTiles) {\r\n        for (var i=0; i<addedTiles.length; i++) {\r\n            \r\n            if (addedTiles[i].use) {\r\n                tileArr.push(addedTiles[i].value);\r\n            }\r\n        } \r\n    }\r\n\r\n    // if user added tiles have already been added to addedTiles\r\n    var insertAmt = 24 - tileArr.length;\r\n    for (i=0; i<insertAmt; i++) {\r\n        do\r\n        {\r\n            var index = Math.floor(Math.random() * availableTiles.length);\r\n        } while (usedIndexLoad.includes(index));\r\n        usedIndexLoad.push(index);\r\n        tileArr.push(availableTiles[index]);\r\n    }\r\n\r\n    // i is col, j is row\r\n    for (var i = 0; i < 5; i++) {\r\n        for (var j = 0; j < 5; j++) {\r\n            if (i != 2 || j != 2) {\r\n                do\r\n                {\r\n                    var index = Math.floor(Math.random() * tileArr.length);\r\n                } while (usedIndex.includes(index));\r\n                usedIndex.push(index);\r\n                items[i][j].value = tileArr[index];\r\n                items[i][j].colIndex = i;\r\n                items[i][j].rowIndex = j;\r\n            }\r\n        }\r\n    }\r\n\r\n    items[2][2].value = \"Free\";\r\n    items[2][2].marked = false;\r\n    items[2][2].colIndex = 2;\r\n    items[2][2].rowIndex = 2;\r\n\r\n    return items;\r\n}\r\n\r\n\r\nexport default loadTiles;","C:\\Users\\hocke\\Desktop\\reactProjects\\rl_bingo_typescript\\src\\components\\BingoItemRepository.js",[],["61","62"],"C:\\Users\\hocke\\Desktop\\reactProjects\\rl_bingo_typescript\\src\\components\\gameBoard.tsx",["63"],"import React, { FunctionComponent } from 'react';\r\nimport IItems from './structuers/tileItem';\r\nimport checkWin from './checkWin';\r\n\r\nconst GameBoard: FunctionComponent<{boardTiles: IItems[][] | undefined}> = ({boardTiles}) => {\r\n   \r\n    if (!boardTiles) {\r\n        return <div></div>\r\n    }\r\n    \r\n    const handleClick = (e: any) => {\r\n        var i = e.target.id.split(\"\")[0];\r\n        var j = e.target.id.split(\"\")[1];\r\n        boardTiles[i][j].marked = !boardTiles[i][j].marked;\r\n        if (e.target.style.backgroundColor === \"red\") {\r\n            e.target.style.backgroundColor = \"green\";\r\n        }\r\n        else {\r\n            e.target.style.backgroundColor = \"red\";\r\n        }\r\n        var win = checkWin(boardTiles);\r\n        // if (win) (\r\n        //     alert(\"Winner\")\r\n        // )\r\n\r\n        return;\r\n    }\r\n\r\n    return (\r\n        <table>\r\n            <tbody>\r\n                {boardTiles.map(row => <tr className=\"row\">{row.map(cell => <th id={\"\" + cell.colIndex + cell.rowIndex} className=\"boardItem\" style={{backgroundColor: 'red'}} onClick={(e) => handleClick(e)}>{cell.value}</th>)}</tr>)}\r\n            </tbody>\r\n        </table>\r\n\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default GameBoard;","C:\\Users\\hocke\\Desktop\\reactProjects\\rl_bingo_typescript\\src\\components\\checkWin.tsx",["64"],"import React from 'react';\r\nimport IItem from './structuers/tileItem';\r\n\r\nfunction checkWin(gameBoard: IItem[][]) {\r\n    var pass=false;\r\n    // let temp = this.state.rows;\r\n    // let slpAmt = this.state.sleepAmt;\r\n    \r\n    //horizontal check\r\n    for (var i=0; i<5; i++) {\r\n        for (var j=0; j<5; j++) {\r\n            if (gameBoard[i][j].marked) {\r\n                pass=true;\r\n            }\r\n            else {\r\n                pass=false;\r\n                break;\r\n            }\r\n        }\r\n        if (pass) {\r\n            //await sleep(slpAmt);\r\n            //this.togglePopup(this)\r\n            return pass;\r\n        }\r\n    }\r\n\r\n    //vertical check\r\n    for (i=0; i<5; i++) {\r\n        for (j=0; j<5; j++) {\r\n            if (gameBoard[j][i].marked) {\r\n                pass=true;\r\n            }\r\n            else {\r\n                pass=false;\r\n                break;\r\n            }\r\n        }\r\n        if (pass) {\r\n            // await sleep(slpAmt);\r\n            // this.togglePopup(this)\r\n            return pass;\r\n        }\r\n    }\r\n\r\n    //diagonal check - left to right\r\n    for (i=0; i<5; i++) {\r\n        if (gameBoard[i][i].marked) {\r\n            pass=true;\r\n        }\r\n        else {\r\n            pass=false;\r\n            break;\r\n        }\r\n    }\r\n    if (pass) {\r\n        // await sleep(slpAmt);\r\n        // this.togglePopup(this)\r\n        return pass;\r\n    }\r\n\r\n    //diagonal check - right to left\r\n    j = 4;\r\n    for (i=0; i<5; i++) {\r\n        if (gameBoard[i][j].marked) {\r\n            pass=true;\r\n            j--;\r\n        }\r\n        else {\r\n            pass=false;\r\n            break;\r\n        }\r\n    }\r\n    if (pass) {\r\n        // await sleep(slpAmt);\r\n        // this.togglePopup(this)\r\n        return pass;\r\n    }\r\n    return false;\r\n}\r\n\r\n\r\nexport default checkWin;\r\n","C:\\Users\\hocke\\Desktop\\reactProjects\\rl_bingo_typescript\\src\\components\\reset.tsx",["65","66"],"import React, { FunctionComponent } from 'react';\r\nimport IItem from './structuers/tileItem';\r\n\r\nfunction reset(gameBoard: IItem[][] | undefined) {\r\n    if (!gameBoard) {\r\n        return;\r\n    }\r\n    for (var i=0; i<5; i++) {\r\n        for (var j=0; j<5; j++) {\r\n            gameBoard[i][j].marked = false;\r\n            var id = \"\" + i + j;\r\n            var tmp = document.getElementById(id);\r\n            if (tmp) {\r\n                tmp.style.backgroundColor = \"red\";\r\n            }\r\n        }\r\n    }\r\n    return;\r\n}\r\n\r\n\r\nexport default reset;","C:\\Users\\hocke\\Desktop\\reactProjects\\rl_bingo_typescript\\src\\components\\newItemInput.tsx",[],{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","severity":1,"message":"72","line":3,"column":8,"nodeType":"73","messageId":"74","endLine":3,"endColumn":15},{"ruleId":"71","severity":1,"message":"75","line":22,"column":11,"nodeType":"73","messageId":"74","endLine":22,"endColumn":19},{"ruleId":"71","severity":1,"message":"76","line":53,"column":7,"nodeType":"73","messageId":"74","endLine":53,"endColumn":14},{"ruleId":"71","severity":1,"message":"77","line":1,"column":17,"nodeType":"73","messageId":"74","endLine":1,"endColumn":26},{"ruleId":"71","severity":1,"message":"75","line":19,"column":11,"nodeType":"73","messageId":"74","endLine":19,"endColumn":19},{"ruleId":"71","severity":1,"message":"78","line":1,"column":10,"nodeType":"73","messageId":"74","endLine":1,"endColumn":27},{"ruleId":"71","severity":1,"message":"79","line":2,"column":8,"nodeType":"73","messageId":"74","endLine":2,"endColumn":13},{"ruleId":"80","severity":1,"message":"81","line":47,"column":14,"nodeType":"73","messageId":"82","endLine":47,"endColumn":15},{"ruleId":"83","severity":1,"message":"84","line":49,"column":19,"nodeType":"85","messageId":"86","endLine":49,"endColumn":21},{"ruleId":"83","severity":1,"message":"84","line":49,"column":29,"nodeType":"85","messageId":"86","endLine":49,"endColumn":31},{"ruleId":"80","severity":1,"message":"87","line":52,"column":25,"nodeType":"73","messageId":"82","endLine":52,"endColumn":30},{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","severity":1,"message":"88","line":21,"column":13,"nodeType":"73","messageId":"74","endLine":21,"endColumn":16},{"ruleId":"71","severity":1,"message":"79","line":1,"column":8,"nodeType":"73","messageId":"74","endLine":1,"endColumn":13},{"ruleId":"71","severity":1,"message":"79","line":1,"column":8,"nodeType":"73","messageId":"74","endLine":1,"endColumn":13},{"ruleId":"71","severity":1,"message":"89","line":1,"column":17,"nodeType":"73","messageId":"74","endLine":1,"endColumn":34},"no-native-reassign",["90"],"no-negated-in-lhs",["91"],"@typescript-eslint/no-unused-vars","'picture' is defined but never used.","Identifier","unusedVar","'testFunc' is assigned a value but never used.","'bgStyle' is assigned a value but never used.","'useEffect' is defined but never used.","'defaultCipherList' is defined but never used.","'React' is defined but never used.","@typescript-eslint/no-redeclare","'i' is already defined.","redeclared","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'index' is already defined.","'win' is assigned a value but never used.","'FunctionComponent' is defined but never used.","no-global-assign","no-unsafe-negation"]